//
//  StopWatchStyleKit.swift
//  LikeUber
//
//  Created by WangLei on 2017/6/16.
//  Copyright Â© 2017 WL. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class StopWatchStyleKit : NSObject {
    
    //// Cache
    
    private struct Cache {
        static let color: UIColor = UIColor(red: 0.144, green: 0.658, blue: 0.779, alpha: 1.000)
        static var imageOfStopWatch: UIImage?
        static var stopWatchTargets: [AnyObject]?
    }
    
    //// Colors
    
    @objc dynamic public class var color: UIColor { return Cache.color }
    
    //// Drawing Methods
    
    @objc dynamic public class func drawStopWatch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 250), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 250, height: 250), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 250, y: resizedFrame.height / 250)
        
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 15, y: 30, width: 220, height: 220))
        StopWatchStyleKit.color.setFill()
        ovalPath.fill()
        
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 114, y: 2, width: 22, height: 34))
        StopWatchStyleKit.color.setFill()
        rectanglePath.fill()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 214.14, y: 30))
        bezierPath.addLine(to: CGPoint(x: 235.36, y: 51.21))
        bezierPath.addLine(to: CGPoint(x: 221.21, y: 65.35))
        bezierPath.addCurve(to: CGPoint(x: 214.21, y: 58.35), controlPoint1: CGPoint(x: 221.21, y: 65.35), controlPoint2: CGPoint(x: 218.08, y: 62.22))
        bezierPath.addLine(to: CGPoint(x: 206, y: 58.35))
        bezierPath.addCurve(to: CGPoint(x: 206, y: 50.14), controlPoint1: CGPoint(x: 206, y: 58.35), controlPoint2: CGPoint(x: 206, y: 53.02))
        bezierPath.addCurve(to: CGPoint(x: 200, y: 44.14), controlPoint1: CGPoint(x: 202.61, y: 46.75), controlPoint2: CGPoint(x: 200, y: 44.14))
        bezierPath.addLine(to: CGPoint(x: 214.14, y: 30))
        bezierPath.close()
        StopWatchStyleKit.color.setFill()
        bezierPath.fill()
        
        context.restoreGState()
        
    }
    
    @objc dynamic public class func drawWatchHand(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 220), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 250, height: 220), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 250, y: resizedFrame.height / 220)
        
        
        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 125, y: 110)
        
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4, y: -88))
        bezier2Path.addCurve(to: CGPoint(x: 4, y: -14.46), controlPoint1: CGPoint(x: 4, y: -88), controlPoint2: CGPoint(x: 4, y: -47.41))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 10.34, y: -12.71), controlPoint2: CGPoint(x: 15, y: -6.9))
        bezier2Path.addCurve(to: CGPoint(x: 4, y: 14.46), controlPoint1: CGPoint(x: 15, y: 6.9), controlPoint2: CGPoint(x: 10.34, y: 12.71))
        bezier2Path.addCurve(to: CGPoint(x: 4, y: 27), controlPoint1: CGPoint(x: 4, y: 22.16), controlPoint2: CGPoint(x: 4, y: 27))
        bezier2Path.addLine(to: CGPoint(x: -4, y: 27))
        bezier2Path.addCurve(to: CGPoint(x: -4, y: 14.46), controlPoint1: CGPoint(x: -4, y: 27), controlPoint2: CGPoint(x: -4, y: 22.16))
        bezier2Path.addCurve(to: CGPoint(x: -15, y: 0), controlPoint1: CGPoint(x: -10.34, y: 12.71), controlPoint2: CGPoint(x: -15, y: 6.9))
        bezier2Path.addCurve(to: CGPoint(x: -4, y: -14.46), controlPoint1: CGPoint(x: -15, y: -6.9), controlPoint2: CGPoint(x: -10.34, y: -12.71))
        bezier2Path.addCurve(to: CGPoint(x: -4, y: -88), controlPoint1: CGPoint(x: -4, y: -47.41), controlPoint2: CGPoint(x: -4, y: -88))
        bezier2Path.addLine(to: CGPoint(x: 4, y: -88))
        bezier2Path.addLine(to: CGPoint(x: 4, y: -88))
        bezier2Path.close()
        UIColor.red.setFill()
        bezier2Path.fill()
        
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    //// Generated Images
    
    @objc dynamic public class var imageOfStopWatch: UIImage {
        if Cache.imageOfStopWatch != nil {
            return Cache.imageOfStopWatch!
        }
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 250, height: 250), false, 0)
        StopWatchStyleKit.drawStopWatch()
        
        Cache.imageOfStopWatch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return Cache.imageOfStopWatch!
    }
    
    //// Customization Infrastructure
    
    @IBOutlet @objc dynamic var stopWatchTargets: [AnyObject]! {
        get { return Cache.stopWatchTargets }
        set {
            Cache.stopWatchTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StopWatchStyleKit.imageOfStopWatch)
            }
        }
    }
    
    
    
    
    @objc(StopWatchStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
